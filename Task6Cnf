package Assign2.Assign2;


public class Task6Cnf {

    // if all the vars are positive, than a clause which include all of them will suffice
    public static int[][] atLeastOne(int[] vars) {
        int[][] AtLeastOneArray = new int[1][vars.length];
        for (int j = 0; j < vars.length; j++) {
            AtLeastOneArray[0][j] = vars[j];
        }
        return AtLeastOneArray;
    }


    public static int[][] atMostOne(int[] vars) {
        // at most one means that each clause contains two vars, and each of them is false
        int n = vars.length;
        int binom = (n * (n - 1)) / 2;
        int counter = 0;
        int[][] AtMostOneArray = new int[binom][2]; //newton binmm;
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                AtMostOneArray[counter][0] = vars[i];
                AtMostOneArray[counter][1] = vars[j];
                counter++;
            }
        }
        for (int i = 0; i < binom; i++) { //now we will make each var negative.
            for (int j = 0; j < 2; j++) {
                AtMostOneArray[i][j] = AtMostOneArray[i][j] * (-1);
            }
        }
        return AtMostOneArray;
    }

    public static int[][] exactlyOne(int[] vars) {
        int n = vars.length;
        int x = n;// the number of vars given in the array.
        int binom = (n * (n - 1)) / 2;;// number of clauses which we got from atMostOne
        int exactlyOne[][] = new int[binom + 1][2];
        exactlyOne[0] = new int[x];
        for (int j = 0; j < x; j++) {
            exactlyOne[0][j] = atLeastOne(vars)[0][j];
        }
        for (int i = 1; i < binom + 1; i++) {
            for (int j = 0; j < 2; j++) {
                exactlyOne[i][j] = atMostOne(vars)[i - 1][j];
            }
        }
        return exactlyOne;
    }
}
