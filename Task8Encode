package Assign2.Assign2;

import static Assign2.Assign2.Task6Cnf.exactlyOne;
import static Assign2.Assign2.Task7Map.varName;


public class Task8Encode {


    public static void encode(int sqrtN, int[][] hints, int[][][] map) {
        int length = sqrtN * sqrtN;//the length of the Sudoku board
        int N = length * length;//==n^2 the number of vars in the sat solver
        SATSolver.init(N);// initializing the SATSOLVER

        // well add a clauses from the hints array
        int a = 0;
        int b = 0;
        int value = 0;
        int clause[] = new int[1];
        for (int i = 0; i < hints.length; i++) {
            a = hints[i][0];
            b = hints[i][1];
            value = hints[i][2];
            clause[0] = varName(a, b, value - 1, length);
            SATSolver.addClause(clause);
        }

        // now we will add clause of each line from the map array.
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[i].length; j++) {
                SATSolver.addClauses(exactlyOne(map[i][j]));
            }
        }


        //now we will add clauses from the map blocks array
        int BlockMap[][][] = new int[length][length][length];// a new map for block clauses
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[i].length; j++) {
                for (int q = 0; q < map[i][j].length; q++) {
                    BlockMap[i][j][q] = map[i][j][q];
                }
            }
        }
        blocks3D(BlockMap,sqrtN);// taking the original map and making it a block matrix
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[i].length; j++) {
                SATSolver.addClauses(exactlyOne(BlockMap[i][j]));//adding each cell as a clause
            }
        }



        // now for columns//
        // MapForColumns is a new map for columns3D function
        int MapForColumns[][][] = new int[length][length][length];
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[i].length; j++) {
                for (int q = 0; q < map[i][j].length; q++) {
                    MapForColumns[i][j][q] = map[i][j][q];
                }
            }
        }
        columns3D(MapForColumns);// transposing the map array.

        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[i].length; j++) {
                SATSolver.addClauses(exactlyOne((map[i][j])));// adding each column of the original map to the sat
            }                                                    //solver
        }
    }


    //// columns for 3D array////
    public static int[][][] columns3D(int[][][] ColMap) {
        int[][][] colMatrix = new int[ColMap.length][ColMap.length][ColMap.length];
        for (int i = 0; i < ColMap.length; i++) {
            for (int j = 0; j < ColMap.length; j++) {
                for (int q = 0; q < ColMap.length; q++) {
                    colMatrix[i][j][q] = ColMap[q][i][j];
                }
            }
        }

        for (int i = 0; i < ColMap.length; i++) {//might delete it
            for (int j = 0; j < ColMap.length; j++) {
                for (int q = 0; q < ColMap.length; q++) {
                    ColMap[i][j][q] = colMatrix[i][j][q];
                }
            }
        }
        return ColMap;
    }

    //BLOCK MATRIX///
    public static int[][][] blocks3D(int[][][] matrix, int sqrtN) {
        int countRow = -1;
        int countCol = 0;
        int countDim = 0;
        int[][][] blocMatrix = new int[matrix.length][matrix.length][matrix.length];
        for (int i = 0; i < matrix.length; i = i + sqrtN) {
            for (int j = 0; j < matrix.length; j = j + sqrtN) {
                for (int z = 0; z < matrix.length; z = z + sqrtN) {
                    countRow++;
                    countDim = 0;
                    countCol = 0;
                    for (int q = i; q < i + sqrtN; q++) {
                        for (int k = j; k < j + sqrtN; k++) {
                            for (int p = z; p < z + sqrtN; p++) {
                                blocMatrix[countRow][countCol][countDim] = matrix[k][q][p];
                                countDim++;
                                if (countDim >= matrix.length) {
                                    countDim = 0;
                                    countCol++;
                                }
                                if (countCol >= matrix.length) {
                                    countRow++;
                                    countDim = 0;
                                    countCol = 0;

                                }
                            }
                        }
                    }
                }
            }
        }// now we will copy our block matrix values into the given matrix from the user.
        for (int i = 0; i < matrix.length; i++) {
            for (int k = 0; k < matrix.length; k++) {
                for (int q = 0; q < matrix.length; q++) {
                    matrix[i][k][q] = blocMatrix[i][k][q];
                }
            }
        }
        return blocMatrix;
    }
}





