package Assign2.Assign2;

import static Assign2.Assign2.Task6Cnf.exactlyOne;
import static Assign2.Assign2.Task7Map.varName;


public class Task8Encode {


    public static void encode(int sqrtN, int[][] hints, int[][][] map) {
        int N = sqrtN * sqrtN;//the length of the Sudoku board
        //==n^3 the number of vars in the sat solver
        SATSolver.init(N * N * N);// initializing the SATSOLVER N^3
        // well add a clauses from the hints array
        int a = 0;
        int b = 0;
        int value = 0;
        int clause[] = new int[1];
        for (int i = 0; i < hints.length; i++) {
            a = hints[i][0];
            b = hints[i][1];
            value = hints[i][2];
            clause[0] = varName(a, b, value - 1, N);
            SATSolver.addClause(clause);
        }
        // now we well add clauses of lines
        addClauses(map, N);
        //now we will add clauses from the map blocks array
        int BlockMap[][][] = new int[map.length][map.length][map.length];// a new map for block clauses
        for (int i = 0; i < map.length; i++) {                              // so we don't change the input
            for (int j = 0; j < map[i].length; j++) {
                for (int q = 0; q < map[i][j].length; q++) {
                    BlockMap[i][j][q] = map[i][j][q];
                }
            }
        }
        BlockMap = BLOCKS3D(BlockMap, sqrtN);// taking the original map and making it a block matrix
        addClauses(BlockMap, N);
        //*** now for columns***//
        // MapForColumns is a new map for columns3D function
        int MapForColumns[][][] = new int[N][N][N];
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[i].length; j++) {
                for (int q = 0; q < map[i][j].length; q++) {
                    MapForColumns[i][j][q] = map[i][j][q];
                }
            }
        }
        MapForColumns = columns3D(MapForColumns);// transposing the map array.
        addClauses(MapForColumns, N);
    }


    //// columns for 3D array////
    public static int[][][] columns3D(int[][][] map) {
        int[][][] colMatrix = new int[map.length][map.length][map.length];
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map.length; j++) {
                for (int q = 0; q < map.length; q++) {
                    colMatrix[i][j][q] = map[q][i][j];
                }
            }
        }
        return colMatrix;
    }


    //BLOCK MATRIX///
    public static int[][][] BLOCKS3D(int[][][] matrix, int sqrtN) {
        int countRow = -1;
        int countCol = 0;
        int[][][] blocMatrix = new int[matrix.length][matrix.length][matrix.length];
        for (int i = 0; i < matrix.length; i = i + sqrtN) {
            for (int j = 0; j < matrix.length; j = j + sqrtN) {
                countRow++;
                countCol = 0;
                for (int q = i; q < i + sqrtN; q++) {
                    for (int k = j; k < j + sqrtN; k++) {
                        blocMatrix[countRow][countCol] = matrix[q][k];
                        countCol++;
                        if (countCol == matrix.length) {
                            countCol = 0;
                        }
                    }
                }
            }
        }
        return blocMatrix;
    }

    public static void addClauses(int[][][] map, int N) {//this function will add clauses from each
        int[] Clauses = new int[N];//specific array
        for (int i = 0; i < map.length; i++) {
            for (int j = 0; j < map[i].length; j++) {
                for (int k = 0; k < map[i][j].length; k++) {
                    Clauses[k] = map[i][k][j];
                }
                SATSolver.addClauses(exactlyOne(Clauses));
            }
        }
    }
}


